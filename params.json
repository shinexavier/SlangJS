{
  "name": "Slang.JS",
  "tagline": "A JavaScript Interpreter for SLANG",
  "body": "# Slang.JS\r\n\r\n### A JavaScript Interpreter for SLANG\r\n\r\n***\r\n\r\nThis project is a personal learning project in compiler construction. It is an attempt to port the interpreter (written in C#) that was created by my mentor and friend Praseed Pai K.T (a.k.a Pai) as part of his teaching endeavours.\r\n\r\nThe code is wired based on the e-Book, written by the author himself, available in the Downloads section from http://slangfordotnet.codeplex.com/\r\n\r\n* The whole exercise is achieved in 6 Steps (Step 5 from the original 7 steps have been ignored thereby skipping compilation) as followed in the e-Book.\r\n\r\n* The code leverages Node.JS in step 7 for reading a valid SLANG program file (some samples have been provided in the programs folder). There is no dependency with Node.JS till Step 6. But it would be good to use Node.JS throughout to debug and see the JS console logs.\r\n\r\n* The interpreter have been bundled with a simple HTML code editor for anyone to write and run SLANG programs. Here's the [Slang Interpreter](SlangInterpreter.html).\r\n\r\n\r\n***\r\n\r\n### The Grammar (EBNF) for SLANG is as listed below:\r\n\r\n\r\n- Module ::= (Procedure)+\r\n- Procedure ::= FUNCTION type func_name '('arglist')' stmts END\r\n- type ::= NUMERIC | STRING | BOOLEAN\r\n- arglist ::= '(' (type arg_name | ',')+ ')'\r\n- stmts ::= (stmt)+\r\n- stmt ::= vardeclstmt | printstmt | assignmentstmt | callstmt | ifstmt | whilestmt | returnstmt\r\n- vardeclstmt ::= type variable ';'\r\n- printstmt ::= PRINT expr ';'\r\n- assignmentstmt ::= variable '=' value ';'\r\n- ifstmt ::= IF '('expr')' THEN stmts (| (ELSE stmts)) ENDIF\r\n- whilestmt ::= WHILE '('expr')' stmts WEND\r\n- returnstmt ::= Return expr ';'\r\n- expr ::= BExpr\r\n- BExpr ::= LExpr LOGIC_OP BExpr\r\n- LExpr ::= RExpr REL_OP LExpr\r\n- RExpr ::= Term ADD_OP RExpr\r\n- Term ::= Factor MUL_OP Term\r\n- Factor ::= NUMERIC | STRING | TRUE | FALSE | variable | '(' expr ')' | ('+'|'-'|'!') Factor | callexpr\r\n- callexpr ::= funcname '(' actuals ')'\r\n- LOGIC_OP ::= '&&' | '||'\r\n- REL_OP ::= '>' | '<' | '>=' | '<=' | '<>' | '=='\r\n- MUL_OP ::= '*' |'/'\r\n- ADD_OP ::= '+' |'-'\r\n\r\n\r\nHere is the [Syntax Diagram](SyntaxDiagram.xhtml) corresponding to the Grammar above.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}